# -*- coding: utf-8 -*-
"""PRE_WEEK 16 DAY 82_Dự Án Y Tế Dự Đoán Chỉ Số Bệnh Tiểu Đường NOmodel Streamlit KNN Hồi Quy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gn-UzJGzcA4YANQygJ4g3-88KmTyF58N
"""

# Triển khai app Streamlit
# App sẽ bao gồm:
# Lựa chọn số hàng xóm k
# So sánh mô hình KNN tự viết với mô hình KNN của sklearn
# Biểu đồ MSE theo từng giá trị k
# Kết quả với dữ liệu đã được chuẩn hóa

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.neighbors import KNeighborsRegressor
from sklearn.preprocessing import StandardScaler

# Ham tinh khoang cach Euclidean
def euclidean_distance(a, b):
    return np.sqrt(np.sum((a - b) ** 2))

# Ham du doan KNN Regression

def knn_regression_predict(X_train, y_train, X_test, k):
    predictions = []
    for test_point in X_test:
        distances = [euclidean_distance(test_point, x) for x in X_train]
        k_indices = np.argsort(distances)[:k]
        k_nearest_y = y_train[k_indices]
        predictions.append(np.mean(k_nearest_y))
    return np.array(predictions)

# Load du lieu
data = load_diabetes()
X, y = data.data, data.target

st.title("KNN Regression - Dự đoán chỉ số bệnh tiểu đường")

# Chon gia tri k
k = st.slider("Chọn số lượng hàng xóm gần nhất (k):", 1, 20, 5)

# Tach tap du lieu
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Du doan voi KNN tu viet tay
y_pred_custom = knn_regression_predict(X_train, y_train, X_test, k)
mse_custom = mean_squared_error(y_test, y_pred_custom)
mae_custom = mean_absolute_error(y_test, y_pred_custom)

st.subheader("1. Mô hình KNN tự cài đặt")
st.write(f"MSE: {mse_custom:.2f}")
st.write(f"MAE: {mae_custom:.2f}")

# KNN su dung sklearn
knn_model = KNeighborsRegressor(n_neighbors=k)
knn_model.fit(X_train, y_train)
y_pred_sklearn = knn_model.predict(X_test)
mse_sklearn = mean_squared_error(y_test, y_pred_sklearn)
mae_sklearn = mean_absolute_error(y_test, y_pred_sklearn)

st.subheader("2. Mô hình KNN từ Sklearn")
st.write(f"MSE: {mse_sklearn:.2f}")
st.write(f"MAE: {mae_sklearn:.2f}")

# Ve bieu do MSE theo k
k_values = list(range(1, 21))
mse_list = [mean_squared_error(y_test, knn_regression_predict(X_train, y_train, X_test, k_val)) for k_val in k_values]

fig, ax = plt.subplots()
ax.plot(k_values, mse_list, marker='o')
ax.set_title("Biểu đồ MSE theo k (KNN tự viết)")
ax.set_xlabel("k")
ax.set_ylabel("MSE")
ax.grid(True)
st.pyplot(fig)

# Chuan hoa va mo hinh tren du lieu chuan hoa
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

knn_model_scaled = KNeighborsRegressor(n_neighbors=k)
knn_model_scaled.fit(X_train_scaled, y_train)
y_pred_scaled = knn_model_scaled.predict(X_test_scaled)
mse_scaled = mean_squared_error(y_test, y_pred_scaled)

st.subheader("3. Mô hình Sklearn KNN với dữ liệu chuẩn hóa")
st.write(f"MSE: {mse_scaled:.2f}")