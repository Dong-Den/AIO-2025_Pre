# -*- coding: utf-8 -*-
"""PRE_WEEK 16 DAY 81_Dự Án Y Tế: Dự Đoán Bệnh Dựa Trên Triệu Chứng Sử Dụng KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q7rw0hYai4XVP69E5JDW3MlPYAkMewT2

#### Dự Án Y Tế: Dự Đoán Bệnh Dựa Trên Triệu Chứng Sử Dụng KNN
"""

import streamlit as st
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier

# 1. Tạo dữ liệu giả lập
# Sốt, ho, mệt mỏi, khó thở, Bệnh
# Fever, Cough, Fatigue, Shortness of breath, Disease
data = [
    [1, 1, 0, 0, 'Cold'],
    [1, 1, 1, 0, 'Flu'],
    [1, 1, 1, 1, 'COVID-19'],
    [0, 0, 0, 0, 'Healthy'],
    [1, 0, 1, 0, 'Flu'],
    [0, 1, 0, 0, 'Cold'],
    [1, 0, 0, 1, 'COVID-19'],
    [0, 1, 1, 0, 'Flu'],
    [0, 0, 1, 0, 'Healthy'],
    [1, 1, 0, 1, 'COVID-19'],
]
df = pd.DataFrame(data, columns=['Fever', 'Cough', 'Fatigue', 'Shortness of breath', 'Disease'])

# 2. Huấn luyện mô hình KNN
X = df[['Fever', 'Cough', 'Fatigue', 'Shortness of breath']]
y = df['Disease']
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X, y)

# 3. Giao diện Streamlit
st.title('KNN-based Disease Classification using Patient Symptoms')
st.write('Dự đoán bệnh lý dựa trên các triệu chứng đơn giản bằng thuật toán KNN.')

st.header('Nhập triệu chứng của bạn:')
fever = st.selectbox('Fever (Sốt)', [0, 1], format_func=lambda x: 'Có' if x == 1 else 'Không')
cough = st.selectbox('Cough (Ho)', [0, 1], format_func=lambda x: 'Có' if x == 1 else 'Không')
fatigue = st.selectbox('Fatigue (Mệt mỏi)', [0, 1], format_func=lambda x: 'Có' if x == 1 else 'Không')
short_breath = st.selectbox('Shortness of breath (Khó thở)', [0, 1], format_func=lambda x: 'Có' if x == 1 else 'Không')

if st.button('Dự đoán bệnh'):  #khi người dùng nhấn nút, đoạn code bên trong sẽ được thực thi
    input_data = [[fever, cough, fatigue, short_breath]]  # Gom các triệu chứng người dùng đã chọn vào một mảng để dùng cho mô hình KNN
    prediction = knn.predict(input_data)[0]
    st.success(f'Kết quả dự đoán: {prediction}')

st.markdown('---')
st.subheader('Dataset mẫu')
st.dataframe(df)

"""#### cú pháp: st.selectbox(label, options, index=0, format_func=None, key=None, help=None, ...)
##### format_func: Hàm chuyển giá trị thành dạng dễ đọc
#### hai dấu ngoặc vuông [[...]] là để đảm bảo rằng input_data có đúng hình dạng (shape) mà mô hình .predict() yêu cầu
#### input_data = [[fever, cough, fatigue, short_breath]]  Gom các triệu chứng người dùng đã chọn vào một mảng để dùng cho mô hình KNN
#### Là một mảng 2 chiều, tương ứng với: 1 dòng dữ liệu (1 bệnh nhân) gồm 4 đặc trưng (triệu chứng).
#### [[fever, cough, fatigue, short_breath]] 2 chiều – list of list, Là 1 bảng có 1 dòng — đúng định dạng mà .predict() yêu cầu.
#### [fever, cough, fatigue, short_breath] 1 chiều – list, Là 1 mẫu (sample), nhưng không phải dạng bảng.
#### Hàm .predict() trong Scikit-learn luôn yêu cầu dữ liệu đầu vào phải có dạng bảng (matrix) 2D — tức là số mẫu × số đặc trưng.

#### predict(...)	Hàm dự đoán đầu ra (nhãn) cho dữ liệu đầu vào
#### input_data	Dữ liệu đầu vào – phải là mảng 2 chiều
#### [0]	Lấy phần tử đầu tiên của kết quả dự đoán (vì kết quả là 1 danh sách)

#### Hàm knn.predict() trả về một mảng chứa nhãn dự đoán (kiểu như ['Flu'], ['Cold'], ...).
#### Luôn dùng [[...]] cho input_data
#### Thêm [0] nếu bạn chỉ muốn lấy một kết quả duy nhất (không phải mảng)
#### st.success(...) Hiển thị một hộp màu xanh lá, dùng để thông báo thành công  
#### st.markdown('---') Hiển thị nội dung bằng cú pháp Markdown: chèn một đường kẻ ngang (horizontal line) giúp phân cách nội dung trên giao diện.
#### st.subheader('Dataset mẫu') Hiển thị tiêu đề phụ – kích thước nhỏ hơn st.header() và st.title()
#### st.dataframe(df) Widget dùng để hiển thị bảng dữ liệu có thể cuộn, sắp xếp, lọc, kéo giãn cột. Thường là DataFrame của pandas.
"""

